---
import Layout from '../layouts/Layout.astro';

// Definir tipos
interface Producto {
  id: number;
  nombre: string;
  descripcion?: string;
  categoria?: string;
  precio: number;
  stock: number;
  imagen_url?: string;
  precio_descuento?: number;
}

interface EstadoProductos {
  productos: Producto[];
  error: string | null;
  cargando: boolean;
}

declare global {
  interface Window {
    productosState: EstadoProductos;
    recargarProductos?: () => void;
  }
}

// Solo obtener datos del servidor si estamos en el cliente
const isBrowser = typeof window !== 'undefined';

// Estado inicial
let productos: Producto[] = [];
let error: string | null = null;

// Estado inicial para el renderizado del servidor
let serverSideProducts: Producto[] = [];
let serverSideError: string | null = null;

// Cargar productos desde la API
if (isBrowser) {
  console.log('Cargando productos...');
  
  // Inicializar el estado en el cliente
  if (!window.productosState) {
    window.productosState = {
      productos: [],
      error: null,
      cargando: true
    };
  }
  
  // Asegurarse de que los arrays no sean undefined
  window.productosState.productos = window.productosState.productos || [];

  // Definir el tipo para el estado de productos
  type EstadoProductos = {
    productos?: ServerSideProduct[];
    error?: string | null;
    cargando?: boolean;
  };

  // Función para actualizar el estado y notificar a los componentes
  const actualizarEstado = (nuevoEstado: EstadoProductos) => {
    window.productosState = { ...window.productosState, ...nuevoEstado };
    
    // Disparar evento personalizado para notificar a los componentes
    document.dispatchEvent(new CustomEvent('estadoProductosActualizado', {
      detail: window.productosState
    }));
  };
  
  // Función para cargar productos
  const cargarProductos = async () => {
    try {
      actualizarEstado({ cargando: true, error: null });
      
      console.log('Realizando petición a /api/productos');
      const response = await fetch('/api/productos', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache, no-store, must-revalidate'
        },
        credentials: 'same-origin'
      });
      
      console.log('Respuesta recibida:', response.status, response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error en la respuesta:', errorText);
        throw new Error(`Error al cargar los productos: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Datos recibidos:', data);
      
      // Asegurarse de que los datos sean un array
      const productosArray = Array.isArray(data) ? data : [data];
      console.log('Productos procesados:', productosArray);
      
      // Actualizar el estado
      actualizarEstado({
        productos: productosArray,
        error: null,
        cargando: false
      });
      
    } catch (err) {
      console.error('Error al cargar productos:', err);
      actualizarEstado({
        productos: [],
        error: err.message,
        cargando: false
      });
    }
  };
  
  // Iniciar la carga de productos cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', cargarProductos);
  } else {
    cargarProductos();
  }
  
  // Exponer la función para recargar manualmente
  window.recargarProductos = cargarProductos;
} else {
  // Código para renderizado del lado del servidor
  try {
    const response = await fetch('http://localhost:3000/api/productos');
    if (response.ok) {
      const data = await response.json();
      serverSideProducts = Array.isArray(data) ? data : [data];
    } else {
      serverSideError = 'Error al cargar los productos';
    }
  } catch (err) {
    serverSideError = 'No se pudo conectar con el servidor';
    console.error('Error en el servidor:', err);
  }
}
---

<Layout title="Nuestros Productos">
  <main class="container mx-auto px-4 py-8 min-h-[60vh]">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">Nuestros Productos</h1>
      <a 
        href="/agregar-producto"
        class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors"
      >
        + Agregar Producto
      </a>
    </div>
    
    {/* Tabla de productos */}
    {isBrowser ? (
      window.productosState.productos && window.productosState.productos.length > 0 ? (
        <div class="bg-white rounded-lg shadow overflow-hidden">
          <div class="flex justify-between items-center p-4 border-b">
            <h2 class="text-lg font-semibold">Lista de Productos</h2>
            <div class="flex space-x-2">
              <a href="/agregar-producto" class="px-3 py-1 bg-green-100 text-green-600 rounded-md text-sm hover:bg-green-200">
                + Agregar
              </a>
            </div>
          </div>
          
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {window.productosState.productos.map((producto: Producto) => (
                  <tr data-key={`producto-${producto.id}`} class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {producto.id}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-gray-900">{producto.nombre}</div>
                      <div class="text-sm text-gray-500">{producto.descripcion || 'Sin descripción'}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {producto.categoria || 'Sin categoría'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      ${(Number(producto.precio) || 0).toFixed(2)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {producto.stock} unidades
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button 
                        onclick={`editarProducto(${JSON.stringify(producto)})`}
                        class="text-indigo-600 hover:text-indigo-900 mr-4"
                      >
                        Editar
                      </button>
                      <button 
                        onclick={`eliminarProducto(${producto.id})`}
                        class="text-red-600 hover:text-red-900"
                      >
                        Eliminar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded inline-block" role="alert">
            <p>No se encontraron productos. <a href="/agregar-producto" class="text-blue-600 hover:underline">Agregar un producto</a></p>
          </div>
          <h3 class="mt-4 text-lg font-medium text-gray-900">No hay productos disponibles</h3>
          <p class="mt-1 text-gray-500">Comienza agregando un nuevo producto.</p>
          <div class="mt-6">
            <a
              href="/agregar-producto"
              class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
              </svg>
              Agregar Producto
            </a>
          </div>
        </div>
      )
    ) : (
      <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        <span class="ml-3 text-lg">Cargando aplicación...</span>
      </div>
    )}

    {/* Estado de error (solo para renderizado del servidor) */}
    {!isBrowser && serverSideError && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded" role="alert">
        <p class="font-bold">Error al cargar los productos</p>
        <p class="mb-4">{error}</p>
        <div class="flex space-x-4">
          <button 
            class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            onclick="window.location.reload()"
          >
            Reintentar
          </button>
          <a
            href="/agregar-producto"
            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Agregar Producto
          </a>
        </div>
      </div>
    )}

    {!isBrowser && serverSideProducts.length > 0 && (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {serverSideProducts.map((producto: ServerSideProduct) => (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
            <div class="relative h-48 overflow-hidden">
              {producto.imagen_url ? (
                <img 
                  src={producto.imagen_url} 
                  alt={producto.nombre}
                  class="h-full w-full object-cover"
                  onError="this.onerror=null; this.src='https://placehold.co/100x100?text=Sin+imagen';"
                />
              ) : (
                <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center">
                  <span class="text-gray-400 dark:text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </span>
                </div>
              )}
              {producto.stock <= 0 && (
                <div class="absolute top-2 right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                  Agotado
                </div>
              )}
            </div>
            <div class="p-4">
              <div class="flex justify-between items-start">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white line-clamp-1">
                  {producto.nombre}
                </h2>
                {producto.precio_descuento && producto.precio_descuento < producto.precio ? (
                  <div class="flex flex-col items-end">
                    <span class="text-sm text-gray-500 dark:text-gray-400 line-through">
                      ${(Number(producto.precio) || 0).toFixed(2)}
                    </span>
                    <span class="text-lg font-bold text-green-600 dark:text-green-400">
                      ${parseFloat(producto.precio_descuento).toFixed(2)}
                    </span>
                  </div>
                ) : (
                  <span class="text-lg font-bold text-gray-900 dark:text-white">
                    ${parseFloat(producto.precio || 0).toFixed(2)}
                  </span>
                )}
              </div>
              
              {producto.descripcion && (
                <p class="text-gray-600 dark:text-gray-300 mt-2 text-sm line-clamp-2">
                  {producto.descripcion}
                </p>
              )}
              
              <div class="mt-4 flex justify-between items-center">
                <span class="text-sm text-gray-500 dark:text-gray-400">
                  {producto.stock > 0 ? (
                    <span class="flex items-center">
                      <span class="w-2 h-2 bg-green-500 rounded-full mr-1"></span>
                      En stock ({producto.stock})
                    </span>
                  ) : (
                    <span class="text-red-500 flex items-center">
                      <span class="w-2 h-2 bg-red-500 rounded-full mr-1"></span>
                      Sin stock
                    </span>
                  )}
                </span>
                <button 
                  class={`px-4 py-2 rounded transition-colors flex items-center ${
                    producto.stock > 0 
                      ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                      : 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                  }`}
                  disabled={producto.stock <= 0}
                  onclick={producto.stock > 0 ? `addToCart(${JSON.stringify({
                    id: producto.id,
                    nombre: producto.nombre,
                    precio: producto.precio_descuento || producto.precio,
                    imagen: producto.imagen_url
                  })})` : null}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  {producto.stock > 0 ? 'Agregar' : 'Agotado'}
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    )}
  </main>
  
  <script>
    // Definir tipos
    interface Producto {
      id: number;
      nombre: string;
      descripcion?: string;
      categoria?: string;
      precio: number;
      stock: number;
      imagen_url?: string;
    }
    
    // Asegurar que los productos estén inicializados
    if (window.productosState && !window.productosState.productos) {
      window.productosState.productos = [];
    }

    // Usar la interfaz de Window extendida globalmente
    const win = window as Window;

    // Función para manejar la edición de un producto
    function editarProducto(producto: {
      id: number;
      nombre: string;
      descripcion?: string;
      categoria?: string;
      precio: number;
      stock: number;
      imagen_url?: string;
    }) {
      // Implementar lógica de edición
      console.log('Editar producto:', producto);
      // Ejemplo: Redirigir a la página de edición
      // window.location.href = `/editar-producto/${producto.id}`;
      alert(`Editar producto: ${producto.nombre}`);
    }

    // Función para manejar la eliminación de un producto
    async function eliminarProducto(id: number) {
      if (!confirm('¿Estás seguro de que deseas eliminar este producto?')) {
        return;
      }
      
      try {
        const response = await fetch(`/api/productos/${id}`, {
          method: 'DELETE',
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Error al eliminar el producto');
        }
        
        alert('Producto eliminado correctamente');
        if (win.recargarProductos) {
          win.recargarProductos();
        }
      } catch (error) {
        console.error('Error al eliminar el producto:', error);
        const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
        alert(`Error: ${errorMessage}`);
      }
    }

    // Definir tipo para el producto en el carrito
    type ProductoCarrito = {
      id: number;
      nombre: string;
      cantidad?: number;
      // Otras propiedades que pueda tener el producto
      [key: string]: any;
    };

    // Función para manejar el carrito de compras
    function addToCart(producto: ProductoCarrito): void {
      console.log('Agregando al carrito:', producto);
      // Obtener el carrito actual del localStorage
      let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
      
      // Verificar si el producto ya está en el carrito
      const productoExistente = carrito.find(item => item.id === producto.id);
      
      if (productoExistente) {
        // Si ya existe, incrementar la cantidad
        productoExistente.cantidad = (productoExistente.cantidad || 1) + 1;
      } else {
        // Si no existe, agregarlo con cantidad 1
        producto.cantidad = 1;
        carrito.push(producto);
      }
      
      // Guardar en localStorage
      localStorage.setItem('carrito', JSON.stringify(carrito));
      
      // Mostrar notificación
      const notificacion = document.createElement('div');
      notificacion.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg flex items-center';
      notificacion.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        ${producto.nombre} agregado al carrito
      `;
      
      document.body.appendChild(notificacion);
      
      // Eliminar la notificación después de 3 segundos
      setTimeout(() => {
        notificacion.style.opacity = '0';
        notificacion.style.transition = 'opacity 0.5s';
        setTimeout(() => notificacion.remove(), 500);
      }, 3000);
      
      // Actualizar el contador del carrito si existe
      actualizarContadorCarrito();
    }
    
    // Función para actualizar el contador del carrito
    function actualizarContadorCarrito() {
      const carrito = JSON.parse(localStorage.getItem('carrito')) || [];
      const contador = document.getElementById('contador-carrito');
      const totalItems = carrito.reduce((total, item) => total + (item.cantidad || 1), 0);
      
      if (contador) {
        contador.textContent = totalItems;
        contador.style.display = totalItems > 0 ? 'flex' : 'none';
      }
    }
    
    // Cargar el contador del carrito cuando la página se cargue
    document.addEventListener('DOMContentLoaded', () => {
      actualizarContadorCarrito();
      
      // Recargar los productos si hay un parámetro de recarga en la URL
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('recargar')) {
        window.location.href = window.location.pathname;
      }
    });
  </script>
</Layout>
